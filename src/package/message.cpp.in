//=================================================================================================
// Copyright (c) 2011, Johannes Meyer, TU Darmstadt
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Flight Systems and Automatic Control group,
//       TU Darmstadt, nor the names of its contributors may be used to
//       endorse or promote products derived from this software without
//       specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//=================================================================================================

#include <introspection/message_template.h>
#include <introspection/field.h>
#include <introspection/accessor.h>
#include <introspection/package.h>
#include <introspection/introspection.h>
#include <@package@/@message@.h>

@_field_includes@

namespace cpp_introspection {

// explicit instantiation
template class MessageTemplate< ::@package@::@message@ >;

namespace @package@ {
namespace @message@ {

  class __declspec(dllexport) Introspection : public MessageTemplate< ::@package@::@message@ > {
  protected:
//    const Package& package_;
    V_Field fields_;
    M_Field fields_by_name_;
    V_FieldName field_names_;

  public:
//    Introspection(const Package& package);
    Introspection();
    virtual ~Introspection() {}

    PackagePtr package() const { return ::cpp_introspection::package("@package@"); }
    const char* getPackageName() const { return "@package@"; }

    const char* getName() const { return "@message@"; }

    const V_Field& fields() const { return fields_; }
    FieldWPtr field(const std::string& name) const { return fields_by_name_.at(name); }
    const V_FieldName& getFieldNames() const { return field_names_; }

  private:
    const FieldPtr& add(const FieldPtr& field);
  };

  const FieldPtr& Introspection::add(const FieldPtr& field)
  {
    fields_.push_back(field);
    fields_by_name_[field->getName()] = field;
    field_names_.push_back(field->getName());
    return field;
  }

  Introspection::Introspection()
  {
@_field_initializers@
  }

  MessagePtr Instance(struct G_Vars * gvars) {

	  std::cout << "In @package@/@message@::Instance() (gvars@" << ::cpp_introspection::gvars << ")" << std::endl;
	  ::cpp_introspection::gvars = gvars;
    MessagePtr instance = messageByDataType("@package@/@message@");
    if (!instance) instance.reset(new Introspection());
    return instance;
  }

}}} // namespace
