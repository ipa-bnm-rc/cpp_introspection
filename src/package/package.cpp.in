//=================================================================================================
// Copyright (c) 2011, Johannes Meyer, TU Darmstadt
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Flight Systems and Automatic Control group,
//       TU Darmstadt, nor the names of its contributors may be used to
//       endorse or promote products derived from this software without
//       specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//=================================================================================================

#include <introspection/introspection.h>
#include <introspection/package.h>
#include <introspection/@package@/package.h>

@_dependent_declarations@

namespace cpp_introspection {
namespace @package@ {

  class __declspec(dllexport) Introspection : public Package {
  public:
    Introspection(M_Message * messages_by_name);
    const char *getName() const;
  private:
    M_Message * messages_by_name_;
  protected:
      virtual MessagePtr add(const MessagePtr& message);
  };

  Introspection::Introspection(M_Message * messages_by_name) {
	  messages_by_name_ = messages_by_name;
@_dependent_initializers@
@_message_initializers@
  }

  MessagePtr Introspection::add(const MessagePtr & message) {
	  if (messages_by_name_->count(message->getDataType()))
		  return (*messages_by_name_)[message->getDataType()].lock();
	  (*messages_by_name_)[message->getDataType()] = message;
	  return message;
  }

  const char *Introspection::getName() const {
    return "@package@";
  }

  PackagePtr Load(M_Message * messages_by_name_ptr) {
    return Package::add(PackagePtr(new Introspection(messages_by_name_ptr)));
  }

//  PackagePtr Instance() {
//    PackagePtr instance = package("@package@");
//    if (!instance) instance = Load(0);
//    return instance;
//  }

} // namespace @package@
} // namespace cpp_introspection

using namespace cpp_introspection;
extern "C" __declspec(dllexport) PackagePtr cpp_introspection_load_package(M_Message * messages_by_name_ptr) {
//	std::cout << "Got it. Given map lies at " << messages_by_name_ptr << ", size is " << messages_by_name_ptr->size() << std::endl;
//	(*messages_by_name_ptr)["super"] = MessagePtr();
//	std::cout << "Added entry. New size is " << messages_by_name_ptr->size() << std::endl;
	return ::cpp_introspection::@package@::Load(messages_by_name_ptr);
}
